// NWB Evaluation Report Interactive Features
// Embedded, self-contained JavaScript - no external dependencies

(function() {
    'use strict';

    // ========================================
    // Initialize on page load
    // ========================================
    document.addEventListener('DOMContentLoaded', function() {
        initializeSearch();
        initializeFilters();
        initializeTooltips();
        initializeExpandCollapse();
        initializeCopyButtons();
    });

    // ========================================
    // Search and Filter Issues
    // ========================================
    function initializeSearch() {
        const searchInput = document.getElementById('issue-search');
        if (!searchInput) return;

        searchInput.addEventListener('input', debounce(filterIssues, 300));
    }

    function initializeFilters() {
        const severityFilter = document.getElementById('severity-filter');
        if (!severityFilter) return;

        severityFilter.addEventListener('change', filterIssues);
    }

    function filterIssues() {
        const searchTerm = document.getElementById('issue-search')?.value.toLowerCase() || '';
        const severityFilter = document.getElementById('severity-filter')?.value || 'all';

        const issueCards = document.querySelectorAll('.issue-card');
        let visibleCount = 0;

        issueCards.forEach(card => {
            const message = card.querySelector('.issue-message')?.textContent.toLowerCase() || '';
            const severity = card.dataset.severity || '';

            const matchesSearch = !searchTerm || message.includes(searchTerm);
            const matchesSeverity = severityFilter === 'all' || severity === severityFilter;

            if (matchesSearch && matchesSeverity) {
                card.style.display = 'block';
                visibleCount++;
            } else {
                card.style.display = 'none';
            }
        });

        updateResultsCount(visibleCount, issueCards.length);
    }

    function updateResultsCount(visible, total) {
        let countElement = document.getElementById('results-count');
        if (!countElement) {
            countElement = document.createElement('div');
            countElement.id = 'results-count';
            countElement.style.cssText = 'margin: 1rem 0; color: #6b7280; font-size: 0.9rem;';
            const issuesSection = document.querySelector('.issues-section');
            if (issuesSection) {
                issuesSection.insertBefore(countElement, issuesSection.querySelector('.issues-list'));
            }
        }

        if (visible === 0) {
            countElement.innerHTML = '<div class="no-results">No issues match your filters</div>';
        } else if (visible < total) {
            countElement.textContent = `Showing ${visible} of ${total} issues`;
        } else {
            countElement.textContent = '';
        }
    }

    // ========================================
    // Expand/Collapse Functionality
    // ========================================
    function initializeExpandCollapse() {
        // Issue cards
        document.querySelectorAll('.issue-header').forEach(header => {
            header.addEventListener('click', function() {
                toggleIssue(this.closest('.issue-card'));
            });
        });

        // Expandable sections
        document.querySelectorAll('.expandable h3').forEach(header => {
            header.style.cursor = 'pointer';
            header.addEventListener('click', function() {
                this.parentElement.classList.toggle('collapsed');
            });
        });
    }

    function toggleIssue(card) {
        if (!card) return;

        const details = card.querySelector('.issue-details');
        if (!details) return;

        details.classList.toggle('collapsed');
        card.classList.toggle('expanded');
    }

    window.toggleIssue = toggleIssue; // Make available globally for onclick

    // ========================================
    // Copy to Clipboard
    // ========================================
    function initializeCopyButtons() {
        document.querySelectorAll('.copy-button').forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
                copyToClipboard(this);
            });
        });
    }

    function copyToClipboard(button) {
        // Find the code element to copy
        const codeElement = button.previousElementSibling;
        if (!codeElement) return;

        const text = codeElement.textContent;

        // Use modern clipboard API
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(text).then(() => {
                showCopyFeedback(button, true);
            }).catch(() => {
                // Fallback for older browsers
                fallbackCopyToClipboard(text, button);
            });
        } else {
            fallbackCopyToClipboard(text, button);
        }
    }

    function fallbackCopyToClipboard(text, button) {
        const textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.style.position = 'fixed';
        textarea.style.opacity = '0';
        document.body.appendChild(textarea);
        textarea.select();

        try {
            document.execCommand('copy');
            showCopyFeedback(button, true);
        } catch (err) {
            showCopyFeedback(button, false);
        }

        document.body.removeChild(textarea);
    }

    function showCopyFeedback(button, success) {
        const originalText = button.textContent;
        button.textContent = success ? '✅' : '❌';
        button.disabled = true;

        setTimeout(() => {
            button.textContent = originalText;
            button.disabled = false;
        }, 2000);
    }

    window.copyToClipboard = copyToClipboard; // Make available globally for onclick

    // ========================================
    // Tooltips
    // ========================================
    function initializeTooltips() {
        // Provenance badges already have CSS hover tooltips
        // This is for any additional tooltip needs
    }

    // ========================================
    // Export to JSON
    // ========================================
    window.exportJSON = function() {
        if (typeof reportData === 'undefined') {
            alert('Report data not available for export');
            return;
        }

        const dataStr = JSON.stringify(reportData, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `nwb_report_${reportData.session_id || 'export'}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    // ========================================
    // Copy Share Link
    // ========================================
    window.copyShareLink = function() {
        const url = window.location.href;

        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(url).then(() => {
                showNotification('Link copied to clipboard!', 'success');
            }).catch(() => {
                fallbackCopyShareLink(url);
            });
        } else {
            fallbackCopyShareLink(url);
        }
    };

    function fallbackCopyShareLink(url) {
        const textarea = document.createElement('textarea');
        textarea.value = url;
        textarea.style.position = 'fixed';
        textarea.style.opacity = '0';
        document.body.appendChild(textarea);
        textarea.select();

        try {
            document.execCommand('copy');
            showNotification('Link copied to clipboard!', 'success');
        } catch (err) {
            showNotification('Failed to copy link', 'error');
        }

        document.body.removeChild(textarea);
    }

    // ========================================
    // Print Optimization
    // ========================================
    window.addEventListener('beforeprint', function() {
        // Expand all collapsed sections for printing
        document.querySelectorAll('.issue-details.collapsed').forEach(details => {
            details.classList.remove('collapsed');
            details.dataset.wasCollapsed = 'true';
        });

        document.querySelectorAll('.expandable.collapsed').forEach(section => {
            section.classList.remove('collapsed');
            section.dataset.wasCollapsed = 'true';
        });
    });

    window.addEventListener('afterprint', function() {
        // Restore collapsed state
        document.querySelectorAll('.issue-details[data-was-collapsed]').forEach(details => {
            details.classList.add('collapsed');
            delete details.dataset.wasCollapsed;
        });

        document.querySelectorAll('.expandable[data-was-collapsed]').forEach(section => {
            section.classList.add('collapsed');
            delete section.dataset.wasCollapsed;
        });
    });

    // ========================================
    // Utility Functions
    // ========================================
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            background: ${type === 'success' ? '#22c55e' : type === 'error' ? '#dc2626' : '#3b82f6'};
            color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            z-index: 10000;
            animation: slideIn 0.3s ease;
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }

    // Add CSS animations for notifications
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);

    // ========================================
    // Keyboard Shortcuts
    // ========================================
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K: Focus search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            const searchInput = document.getElementById('issue-search');
            if (searchInput) {
                searchInput.focus();
                searchInput.select();
            }
        }

        // Ctrl/Cmd + P: Print
        if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
            // Browser handles this natively
        }

        // Esc: Clear search
        if (e.key === 'Escape') {
            const searchInput = document.getElementById('issue-search');
            if (searchInput && searchInput === document.activeElement) {
                searchInput.value = '';
                filterIssues();
                searchInput.blur();
            }
        }
    });

    // ========================================
    // Performance: Lazy Load Images (if any)
    // ========================================
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    if (img.dataset.src) {
                        img.src = img.dataset.src;
                        img.removeAttribute('data-src');
                        observer.unobserve(img);
                    }
                }
            });
        });

        document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
        });
    }

    // ========================================
    // Analytics (optional, for tracking usage)
    // ========================================
    // Track report views, issue interactions, etc.
    // This would be implemented based on your analytics needs

    console.log('NWB Report loaded successfully');
})();