openapi: 3.0.3
info:
  title: MCP Server Architecture API
  description: |
    HTTP/REST API for the MCP Server Architecture feature, providing orchestration
    of multi-agent neurodata conversion workflows. This API is one of multiple
    transport adapters (MCP, HTTP, WebSocket, CLI) that expose the same core
    service layer functionality.

    **Key Features:**
    - Multi-agent workflow orchestration (conversation, conversion, evaluation, metadata)
    - Automatic format detection for 25+ neuroscience formats
    - State-managed workflow execution with checkpoint/resume
    - Comprehensive validation and quality assessment
    - Real-time progress tracking

    **Architecture:**
    - Transport-agnostic core service layer contains all business logic
    - Thin HTTP adapter layer (this API) for REST access
    - Contract tests ensure parity across all transport adapters
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api.example.com/api/v1
    description: Production server

tags:
  - name: workflows
    description: Workflow orchestration and management
  - name: agents
    description: Agent invocation and health checking
  - name: formats
    description: Format detection and interface selection
  - name: validation
    description: NWB validation and quality assessment

paths:
  /workflows:
    post:
      summary: Create a new workflow
      description: |
        Creates a new conversion workflow from input dataset to NWB output.
        The workflow begins in PENDING state and must be explicitly started.
      operationId: createWorkflow
      tags:
        - workflows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
            examples:
              basic:
                summary: Basic workflow creation
                value:
                  input_path: /data/experiments/exp001
                  metadata:
                    experimenter: Jane Doe
                    session_description: Visual cortex recording
      responses:
        '201':
          description: Workflow created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

    get:
      summary: List workflows
      description: Retrieve a list of workflows with optional filtering and pagination
      operationId: listWorkflows
      tags:
        - workflows
      parameters:
        - name: state
          in: query
          description: Filter by workflow state
          schema:
            $ref: '#/components/schemas/WorkflowState'
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sort
          in: query
          description: Sort order
          schema:
            type: string
            enum: [created_asc, created_desc, updated_asc, updated_desc]
            default: created_desc
      responses:
        '200':
          description: Workflows retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflows:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkflowResponse'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'

  /workflows/{workflow_id}:
    get:
      summary: Get workflow by ID
      description: Retrieve detailed information about a specific workflow
      operationId: getWorkflow
      tags:
        - workflows
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '200':
          description: Workflow retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update workflow
      description: Update workflow state or metadata
      operationId: updateWorkflow
      tags:
        - workflows
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowRequest'
      responses:
        '200':
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /workflows/{workflow_id}/start:
    post:
      summary: Start workflow execution
      description: Begin executing a workflow in PENDING state
      operationId: startWorkflow
      tags:
        - workflows
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '200':
          description: Workflow started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /workflows/{workflow_id}/cancel:
    post:
      summary: Cancel workflow execution
      description: Cancel a running workflow, triggering cleanup operations
      operationId: cancelWorkflow
      tags:
        - workflows
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '200':
          description: Workflow cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /workflows/{workflow_id}/steps:
    get:
      summary: Get workflow steps
      description: Retrieve all steps for a workflow
      operationId: getWorkflowSteps
      tags:
        - workflows
      parameters:
        - $ref: '#/components/parameters/WorkflowId'
      responses:
        '200':
          description: Steps retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  steps:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkflowStepResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /agents/{agent_type}/invoke:
    post:
      summary: Invoke an agent
      description: |
        Directly invoke a specific agent with input data. This is a low-level
        operation typically used by the workflow orchestrator, but can be used
        for testing or manual agent interaction.
      operationId: invokeAgent
      tags:
        - agents
      parameters:
        - name: agent_type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AgentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentInvokeRequest'
      responses:
        '200':
          description: Agent invocation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInvokeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '408':
          description: Agent invocation timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Agent unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /agents/health:
    get:
      summary: Check agent health
      description: Get health status of all registered agents
      operationId: getAgentsHealth
      tags:
        - agents
      responses:
        '200':
          description: Agent health status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentHealthStatus'

  /formats/detect:
    post:
      summary: Detect dataset format
      description: |
        Analyze a dataset to detect its format(s) and recommend the appropriate
        NeuroConv interface for conversion.
      operationId: detectFormat
      tags:
        - formats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormatDetectRequest'
      responses:
        '200':
          description: Format detection successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormatDetectionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /formats/supported:
    get:
      summary: List supported formats
      description: Get a list of all supported neuroscience data formats
      operationId: getSupportedFormats
      tags:
        - formats
      responses:
        '200':
          description: Supported formats retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  formats:
                    type: array
                    items:
                      $ref: '#/components/schemas/SupportedFormat'

  /validation/run:
    post:
      summary: Run validation
      description: |
        Validate an NWB file using multiple validation tools (NWB Inspector,
        PyNWB validator, DANDI validator).
      operationId: runValidation
      tags:
        - validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationRequest'
      responses:
        '200':
          description: Validation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /validation/{validation_id}/results:
    get:
      summary: Get validation results
      description: Retrieve detailed validation results by validation ID
      operationId: getValidationResults
      tags:
        - validation
      parameters:
        - name: validation_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Validation results retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    WorkflowState:
      type: string
      enum:
        - pending
        - analyzing
        - collecting
        - converting
        - validating
        - completed
        - failed
        - cancelled
      description: Current state of the workflow

    AgentType:
      type: string
      enum:
        - conversation
        - conversion
        - evaluation
        - metadata_questioner
      description: Type of agent

    StepStatus:
      type: string
      enum:
        - pending
        - running
        - completed
        - failed
        - skipped
        - retrying
      description: Status of a workflow step

    ValidationSeverity:
      type: string
      enum:
        - info
        - warning
        - error
        - critical
      description: Severity level of validation issues

    CreateWorkflowRequest:
      type: object
      required:
        - input_path
      properties:
        input_path:
          type: string
          description: Path to input dataset
          example: /data/experiments/exp001
        metadata:
          type: object
          description: Initial metadata for the workflow
          additionalProperties: true
        auto_start:
          type: boolean
          description: Automatically start workflow after creation
          default: false

    UpdateWorkflowRequest:
      type: object
      properties:
        metadata:
          type: object
          description: Updated metadata
          additionalProperties: true

    WorkflowResponse:
      type: object
      required:
        - id
        - state
        - input_path
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/WorkflowState'
        input_path:
          type: string
        output_path:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        format_info:
          $ref: '#/components/schemas/FormatDetectionResponse'
          nullable: true
        validation_summary:
          type: array
          items:
            $ref: '#/components/schemas/ValidationResult'
          nullable: true
        error_details:
          type: object
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
          nullable: true

    WorkflowStepResponse:
      type: object
      required:
        - id
        - workflow_id
        - agent_type
        - status
        - sequence_number
        - started_at
      properties:
        id:
          type: string
          format: uuid
        workflow_id:
          type: string
          format: uuid
        agent_type:
          $ref: '#/components/schemas/AgentType'
        status:
          $ref: '#/components/schemas/StepStatus'
        input_data:
          type: object
          additionalProperties: true
        output_data:
          type: object
          additionalProperties: true
          nullable: true
        error:
          type: object
          nullable: true
        sequence_number:
          type: integer
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
          nullable: true
        duration_ms:
          type: integer
          nullable: true
        retry_count:
          type: integer

    AgentInvokeRequest:
      type: object
      required:
        - operation
        - input
      properties:
        operation:
          type: string
          description: Operation to perform
          example: analyze_dataset
        input:
          type: object
          description: Operation-specific input data
          additionalProperties: true
        context:
          type: object
          description: Execution context
          additionalProperties: true
        timeout_seconds:
          type: integer
          minimum: 1
          maximum: 3600
          default: 300
        priority:
          type: integer
          minimum: 0
          maximum: 10
          default: 5

    AgentInvokeResponse:
      type: object
      required:
        - agent_type
        - success
        - execution_time_ms
        - correlation_id
      properties:
        agent_type:
          $ref: '#/components/schemas/AgentType'
        success:
          type: boolean
        output_data:
          type: object
          additionalProperties: true
          nullable: true
        error:
          type: object
          nullable: true
          properties:
            type:
              type: string
            message:
              type: string
            details:
              type: object
              additionalProperties: true
        execution_time_ms:
          type: integer
        correlation_id:
          type: string
          format: uuid
        metadata:
          type: object
          additionalProperties: true

    AgentHealthStatus:
      type: object
      required:
        - agent_type
        - healthy
        - last_check
      properties:
        agent_type:
          $ref: '#/components/schemas/AgentType'
        healthy:
          type: boolean
        last_check:
          type: string
          format: date-time
        response_time_ms:
          type: integer
        error:
          type: string
          nullable: true

    FormatDetectRequest:
      type: object
      required:
        - input_path
      properties:
        input_path:
          type: string
          description: Path to dataset for format detection
        detection_layers:
          type: array
          items:
            type: string
          description: Specific detection layers to use (optional)
          example: [extension, magic_bytes, directory_structure]

    FormatInfo:
      type: object
      required:
        - name
        - confidence
        - detection_method
      properties:
        name:
          type: string
          example: Intan
        version:
          type: string
          nullable: true
          example: "2.0"
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          example: 0.95
        neuroconv_interface:
          type: string
          nullable: true
          example: IntanRecordingInterface
        detection_method:
          type: string
          example: directory_structure

    FormatDetectionResponse:
      type: object
      required:
        - formats_detected
        - confidence_scores
        - detection_layers_used
      properties:
        formats_detected:
          type: array
          items:
            $ref: '#/components/schemas/FormatInfo'
        primary_format:
          $ref: '#/components/schemas/FormatInfo'
          nullable: true
        confidence_scores:
          type: object
          additionalProperties:
            type: number
            format: float
        recommended_interface:
          type: string
          nullable: true
        detection_layers_used:
          type: array
          items:
            type: string
        ambiguous_formats:
          type: array
          items:
            $ref: '#/components/schemas/FormatInfo'
        warnings:
          type: array
          items:
            type: string

    SupportedFormat:
      type: object
      required:
        - name
        - neuroconv_interface
      properties:
        name:
          type: string
        description:
          type: string
        neuroconv_interface:
          type: string
        file_extensions:
          type: array
          items:
            type: string
        typical_structure:
          type: string

    ValidationRequest:
      type: object
      required:
        - nwb_file_path
      properties:
        nwb_file_path:
          type: string
          description: Path to NWB file for validation
        validators:
          type: array
          items:
            type: string
          description: Specific validators to run (optional)
          example: [nwb_inspector, pynwb, dandi]
        validation_config:
          type: object
          description: Validator-specific configuration
          additionalProperties: true

    ValidationIssue:
      type: object
      required:
        - severity
        - message
      properties:
        severity:
          $ref: '#/components/schemas/ValidationSeverity'
        message:
          type: string
        location:
          type: string
          nullable: true
        suggestion:
          type: string
          nullable: true
        rule_id:
          type: string
          nullable: true

    ValidationResult:
      type: object
      required:
        - validator_name
        - severity
        - issues
        - quality_score
        - passed
        - execution_time_ms
      properties:
        validator_name:
          type: string
        severity:
          $ref: '#/components/schemas/ValidationSeverity'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/ValidationIssue'
        quality_score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
        passed:
          type: boolean
        execution_time_ms:
          type: integer
        metadata:
          type: object
          additionalProperties: true

    ValidationResponse:
      type: object
      required:
        - validation_id
        - results
        - overall_passed
        - overall_quality_score
      properties:
        validation_id:
          type: string
          format: uuid
        results:
          type: array
          items:
            $ref: '#/components/schemas/ValidationResult'
        overall_passed:
          type: boolean
        overall_quality_score:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
        executed_at:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        correlation_id:
          type: string
          format: uuid
          description: Request correlation ID for tracing

  parameters:
    WorkflowId:
      name: workflow_id
      in: path
      required: true
      description: Unique workflow identifier
      schema:
        type: string
        format: uuid

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: BAD_REQUEST
            message: Invalid input parameters
            details:
              field: input_path
              issue: Path does not exist

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: NOT_FOUND
            message: Workflow not found
            details:
              workflow_id: 123e4567-e89b-12d3-a456-426614174000

    Conflict:
      description: Conflict with current state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: CONFLICT
            message: Workflow was modified by another process
            details:
              current_version: 3
              provided_version: 2

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: INTERNAL_ERROR
            message: An unexpected error occurred
            correlation_id: 123e4567-e89b-12d3-a456-426614174000

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - ApiKeyAuth: []
  - BearerAuth: []
