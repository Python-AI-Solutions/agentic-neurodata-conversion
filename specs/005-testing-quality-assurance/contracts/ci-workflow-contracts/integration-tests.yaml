# CI Workflow Contract: Integration Tests
# GitHub Actions workflow specification for integration test execution

workflow:
  name: "Integration Tests"
  file: ".github/workflows/test-integration.yml"
  description: "Integration tests with real services and lightweight datasets"

triggers:
  pull_request:
    branches: ["main", "develop"]
  push:
    branches: ["main", "develop"]
  workflow_dispatch: {}  # Manual trigger

jobs:
  integration-tests:
    name: "Integration Tests"
    runs-on: "ubuntu-latest"

    timeout-minutes: 20

    services:
      # GraphDB for Knowledge Graph testing
      graphdb:
        image: "ontotext/graphdb:10.5.0"
        ports:
          - "7200:7200"
        options: >-
          --health-cmd "curl -f http://localhost:7200/rest/repositories || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"
        with:
          lfs: true  # DataLad test datasets may use git-lfs

      - name: "Setup Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "3.12"

      - name: "Install pixi"
        uses: "prefix-dev/setup-pixi@v0.5.0"
        with:
          cache: true

      - name: "Install dependencies"
        run: "pixi install -e test"

      - name: "Setup integration environment"
        run: |
          pixi run setup-test-env
          pixi run wait-for-services

      - name: "Initialize test datasets"
        run: "pixi run setup-test-datasets"

      - name: "Run integration tests"
        run: "pixi run test-integration"
        env:
          PYTEST_MARKERS: "integration and not slow"
          GRAPHDB_URL: "http://localhost:7200"
          TEST_DATASETS_DIR: "tests/fixtures/datasets"

      - name: "Upload test results"
        if: always()
        uses: "actions/upload-artifact@v4"
        with:
          name: "integration-test-results"
          path: |
            tests/results/
            tests/logs/

      - name: "Upload coverage"
        uses: "codecov/codecov-action@v4"
        with:
          files: "./coverage.xml"
          flags: "integration"

      - name: "Cleanup test environment"
        if: always()
        run: "pixi run cleanup-test-env"

quality_gates:
  - name: "All tests must pass"
    condition: "success()"
    blocking: true

  - name: "Services must be healthy"
    condition: "services.graphdb.health == 'healthy'"
    blocking: true

  - name: "Coverage uploaded"
    condition: "codecov upload success"
    blocking: false

performance_targets:
  max_duration_minutes: 15
  parallel_execution: false  # Integration tests run sequentially
  cache_dependencies: true

outputs:
  artifacts:
    - name: "Test results"
      path: "tests/results/"
      retention_days: 30

    - name: "Test logs"
      path: "tests/logs/"
      retention_days: 7

    - name: "Coverage data"
      path: "coverage.xml"
      retention_days: 30

notifications:
  on_failure:
    - github_check: "Integration Tests Failed"
    - pr_comment: true
    - include_logs: true

environment_variables:
  PYTEST_MARKERS: "integration and not slow"
  GRAPHDB_URL: "http://localhost:7200"
  TEST_DATASETS_DIR: "tests/fixtures/datasets"
  TEST_ENV: "ci"
  COVERAGE_THRESHOLD: "85"

resource_requirements:
  memory_mb: 4096
  disk_space_mb: 10240  # 10GB for datasets
