openapi: 3.0.3
info:
  title: Agentic Neurodata Conversion API
  description: |
    REST API for converting neurophysiology data to NWB format with user-controlled error correction.

    **Architecture**: Three-agent system (Conversation, Conversion, Evaluation) communicating via MCP protocol.
    **Scope**: MVP - Single session, local deployment, no authentication.

    Related: requirements.md Epic 10 (Web API Layer)
  version: 1.0.0
  contact:
    name: API Support
    url: https://github.com/your-org/agentic-neurodata-conversion

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: health
    description: Health check endpoints
  - name: conversion
    description: File upload and conversion operations
  - name: status
    description: Conversion status and progress
  - name: approval
    description: User decision endpoints (retry approval)
  - name: download
    description: File download endpoints
  - name: logs
    description: Log retrieval

paths:
  /health:
    get:
      tags: [health]
      summary: Health check
      description: Verify server is running (Story 10.1)
      operationId: healthCheck
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time

  /api/info:
    get:
      tags: [health]
      summary: API information
      description: Get API version and capabilities (Story 10.1)
      operationId: apiInfo
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: "1.0.0"
                  capabilities:
                    type: array
                    items:
                      type: string
                    example: ["conversion", "evaluation", "correction_loop"]

  /api/upload:
    post:
      tags: [conversion]
      summary: Upload files and start conversion
      description: |
        Upload neurophysiology data files with metadata and initiate conversion (Story 10.2).

        **Constraints**:
        - Single session: Returns 409 Conflict if system is busy
        - Files uploaded as multipart/form-data
        - Metadata provided as form fields

        **Process**: Upload → Conversation Agent validates metadata → Conversion Agent converts
      operationId: uploadFiles
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
                - subject_id
                - species
                - session_description
                - session_start_time
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Data files (binary, metadata, etc.)
                subject_id:
                  type: string
                  example: "mouse_001"
                species:
                  type: string
                  example: "Mus musculus"
                session_description:
                  type: string
                  example: "Neuropixels recording session 1"
                session_start_time:
                  type: string
                  format: date-time
                  description: "ISO 8601 format"
                  example: "2025-10-15T09:00:00Z"
                experimenter:
                  type: string
                  nullable: true
                institution:
                  type: string
                  nullable: true
                lab:
                  type: string
                  nullable: true
                age:
                  type: string
                  nullable: true
                sex:
                  type: string
                  nullable: true
                weight:
                  type: string
                  nullable: true
      responses:
        '202':
          description: Upload accepted, conversion started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Conversion started"
                  status:
                    type: string
                    example: "processing"
        '400':
          description: Invalid metadata or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: System is busy (single session constraint)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "System is busy processing another conversion"
                code: "CONCURRENT_UPLOAD"

  /api/status:
    get:
      tags: [status]
      summary: Get current conversion status
      description: |
        Query current conversion status, stages, and progress (Story 10.4).

        **Returns**: Complete global state including validation details
      operationId: getStatus
      responses:
        '200':
          description: Current conversion status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /api/correction-context:
    get:
      tags: [status]
      summary: Get correction context for retry decision
      description: |
        Get validation failure summary when awaiting user retry approval (Story 8.2).

        **When available**: After validation fails or passes with issues, before user approves/declines
      operationId: getCorrectionContext
      responses:
        '200':
          description: Correction context available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorrectionContext'
        '404':
          description: No correction context available (not in retry approval state)

  /api/retry-approval:
    post:
      tags: [approval]
      summary: User approves or declines retry attempt
      description: |
        User decision on whether to retry failed conversion or accept/improve file with warnings (Story 8.3).

        **Scenarios**:
        - FAILED validation: User approves or declines retry
        - PASSED_WITH_ISSUES: User improves or accepts as-is (Story 8.3a)
      operationId: submitRetryApproval
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryApprovalRequest'
      responses:
        '200':
          description: Decision accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Retry approved. Starting correction..."
        '400':
          description: Invalid request or not in approval state

  /api/user-input:
    post:
      tags: [approval]
      summary: Submit user input for correction
      description: |
        Provide data requested by system for correction (Story 8.6).

        **When used**: After user approves retry, system may request missing metadata
      operationId: submitUserInput
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInputRequest'
      responses:
        '200':
          description: Input accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Input received. Applying corrections..."
        '400':
          description: Invalid input or validation failed

  /api/download/nwb:
    get:
      tags: [download]
      summary: Download NWB file (latest version)
      description: |
        Download the most recent NWB file (Story 10.6).

        **Versioning**: Returns latest attempt (highest attempt number)
      operationId: downloadNWB
      responses:
        '200':
          description: NWB file download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename="mouse_001_attempt2_a3f9d1c8.nwb"'
        '404':
          description: No NWB file available (conversion incomplete)

  /api/download/nwb/v{version}:
    get:
      tags: [download]
      summary: Download specific NWB version
      description: |
        Download NWB file from specific attempt (Story 8.7, Research Decision 5).

        **Versioning**: Each retry creates new version with SHA256 checksum
      operationId: downloadNWBVersion
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Attempt number (1 = original, 2 = first retry, etc.)
      responses:
        '200':
          description: NWB file download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Version not found

  /api/download/report:
    get:
      tags: [download]
      summary: Download evaluation report
      description: |
        Download PDF report (PASSED/PASSED_WITH_ISSUES) or JSON report (FAILED) (Story 10.6).

        **Format**:
        - PASSED/PASSED_WITH_ISSUES: PDF with LLM analysis (Story 9.5)
        - FAILED: JSON with correction guidance (Story 9.6)
      operationId: downloadReport
      responses:
        '200':
          description: Report download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
                description: Correction context JSON (for FAILED validation)
        '404':
          description: No report available (conversion incomplete)

  /api/logs:
    get:
      tags: [logs]
      summary: Get conversion logs
      description: |
        Retrieve structured logs from current session (Story 10.7).

        **Format**: JSON array of log entries (last 500)
      operationId: getLogs
      parameters:
        - name: level
          in: query
          schema:
            type: string
            enum: [DEBUG, INFO, WARNING, ERROR, CRITICAL]
          description: Filter by log level (optional)
      responses:
        '200':
          description: Log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogEntry'

  /ws:
    get:
      tags: [status]
      summary: WebSocket for real-time progress updates
      description: |
        WebSocket connection for real-time conversion progress (Story 10.5, Research Decision 3).

        **Messages**: JSON-formatted progress updates, stage changes, notifications
        **Connection**: Closes when conversion completes
      operationId: websocketProgress
      responses:
        '101':
          description: WebSocket connection established

components:
  schemas:
    StatusResponse:
      type: object
      description: Complete conversion status (Story 10.4)
      properties:
        status:
          type: string
          enum: [idle, processing, completed, failed]
        validation_status:
          type: string
          enum: [passed, passed_accepted, passed_improved, failed_user_declined, failed_user_abandoned]
          nullable: true
        current_stage:
          $ref: '#/components/schemas/Stage'
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
        metadata:
          type: object
          additionalProperties: true
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
        validation_details:
          type: object
          nullable: true
          properties:
            CRITICAL:
              type: integer
            ERROR:
              type: integer
            WARNING:
              type: integer
            BEST_PRACTICE:
              type: integer
        output_path:
          type: string
          nullable: true
        error_message:
          type: string
          nullable: true

    Stage:
      type: object
      description: Pipeline stage tracking (Story 2.2)
      properties:
        name:
          type: string
          enum: [conversion, evaluation, report_generation]
        status:
          type: string
          enum: [pending, in_progress, completed, failed]
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        output_path:
          type: string
          nullable: true
        error_message:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true

    LogEntry:
      type: object
      description: Individual log entry (Story 2.1)
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          type: string
          enum: [DEBUG, INFO, WARNING, ERROR, CRITICAL]
        component:
          type: string
        message:
          type: string
        metadata:
          type: object
          additionalProperties: true

    RetryApprovalRequest:
      type: object
      description: User decision on retry/improvement (Story 8.3)
      required:
        - approved
      properties:
        approved:
          type: boolean
          description: "True = user approves retry/improvement, False = user declines"
        accept_as_is:
          type: boolean
          nullable: true
          description: "For PASSED_WITH_ISSUES: accept file without improvement (Story 8.3a)"

    UserInputRequest:
      type: object
      description: User-provided data for correction (Story 8.6)
      required:
        - field_name
        - value
      properties:
        field_name:
          type: string
        value:
          description: "Any type (string, number, date, etc.)"

    CorrectionContext:
      type: object
      description: Correction context for user decision (Story 8.1)
      properties:
        validation_result:
          type: object
          description: "Full ValidationResult schema (see data-model.md)"
        auto_fixable_issues:
          type: array
          items:
            type: object
        user_input_required_issues:
          type: array
          items:
            type: object
        suggested_fixes:
          type: array
          items:
            type: object
        attempt_number:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time

  securitySchemes: {}

security: []
