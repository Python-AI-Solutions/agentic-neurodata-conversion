{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MCP Message Catalog",
  "description": "Complete catalog of all MCP messages exchanged between agents in the three-agent system",
  "version": "1.0.0",
  "messages": {
    "conversation_agent": {
      "description": "Conversation Agent handles all user interaction (Epic 4)",
      "actions": {
        "validate_metadata": {
          "description": "Validate user-provided NWB metadata before conversion (Story 4.2)",
          "source": "API",
          "context": {
            "required": ["subject_id", "species", "session_description", "session_start_time"],
            "optional": ["experimenter", "institution", "lab", "age", "sex", "weight"]
          },
          "returns": {
            "success": "ValidationSuccess",
            "error": "ValidationError with field-level details"
          }
        },
        "analyze_correction_context": {
          "description": "Analyze validation failures using LLM (Story 4.4)",
          "source": "evaluation_agent",
          "context": {
            "required": ["correction_context", "validation_result"]
          },
          "returns": {
            "llm_analysis": "Plain language explanation of issues",
            "categorized_issues": {
              "auto_fixable": [],
              "user_input_required": []
            }
          }
        },
        "generate_user_prompt": {
          "description": "Generate contextual prompt for missing data using LLM (Story 4.5)",
          "source": "self (orchestration)",
          "context": {
            "required": ["field_name", "validation_issue", "nwb_context"]
          },
          "returns": {
            "prompt": "User-friendly prompt with examples",
            "validation_rules": "Expected format/constraints"
          }
        },
        "notify_user": {
          "description": "Send real-time notification to user via WebSocket (Story 4.8)",
          "source": "self (orchestration)",
          "context": {
            "required": ["message", "type"],
            "optional": ["stage", "status", "metadata"]
          },
          "returns": "WebSocket message sent confirmation"
        },
        "request_retry_approval": {
          "description": "Request user approval for retry attempt (Story 8.2)",
          "source": "evaluation_agent",
          "context": {
            "required": ["validation_status", "correction_context", "attempt_number"],
            "optional": ["previous_issues"]
          },
          "returns": "Awaits user decision via API endpoint"
        }
      }
    },
    "conversion_agent": {
      "description": "Conversion Agent handles format detection and NWB conversion (Epics 5-6)",
      "actions": {
        "scan_files": {
          "description": "Scan uploaded files and catalog structure (Story 5.1)",
          "source": "conversation_agent",
          "context": {
            "required": ["input_path"]
          },
          "returns": {
            "file_listing": [],
            "directory_structure": {},
            "total_size_bytes": 0
          }
        },
        "detect_format": {
          "description": "Use NeuroConv to detect data format automatically (Story 5.2)",
          "source": "conversation_agent",
          "context": {
            "required": ["input_path"]
          },
          "returns": {
            "detected_interfaces": [],
            "confidence_scores": {},
            "ambiguous": false
          }
        },
        "resolve_ambiguity": {
          "description": "Use LLM to resolve ambiguous format detection (Story 5.3, optional)",
          "source": "self (if detect_format returns ambiguous=true)",
          "context": {
            "required": ["candidate_interfaces", "file_listing", "confidence_scores"]
          },
          "returns": {
            "selected_interface": "string",
            "reasoning": "LLM analysis (optional)"
          },
          "note": "LLM failure degrades gracefully - uses NeuroConv's highest-confidence result"
        },
        "collect_metadata": {
          "description": "Validate and store user-provided NWB metadata (Story 6.1)",
          "source": "conversation_agent",
          "context": {
            "required": ["subject_id", "species", "session_description", "session_start_time"],
            "optional": ["experimenter", "institution", "lab", "age", "sex", "weight"]
          },
          "returns": {
            "validated_metadata": {},
            "validation_errors": []
          }
        },
        "extract_metadata": {
          "description": "Auto-extract technical metadata from data files (Story 6.2)",
          "source": "self (during conversion)",
          "context": {
            "required": ["input_path", "detected_interface"]
          },
          "returns": {
            "sampling_rate": null,
            "channel_count": null,
            "recording_duration": null,
            "data_type": null
          }
        },
        "convert_file": {
          "description": "Execute NeuroConv conversion to NWB (Story 6.3)",
          "source": "conversation_agent",
          "context": {
            "required": ["input_path", "output_path", "metadata", "detected_interface"]
          },
          "returns": {
            "nwb_file_path": "string",
            "checksum_sha256": "string",
            "file_size_bytes": 0,
            "conversion_duration_seconds": 0
          },
          "error_handling": "Raise exceptions with full NeuroConv error details (defensive)"
        },
        "apply_corrections": {
          "description": "Reconvert with corrections after user approval (Story 8.7)",
          "source": "conversation_agent",
          "context": {
            "required": ["input_path", "output_path", "correction_context", "user_input", "attempt_number"]
          },
          "returns": {
            "nwb_file_path": "string (versioned filename)",
            "checksum_sha256": "string",
            "corrections_applied": []
          }
        }
      }
    },
    "evaluation_agent": {
      "description": "Evaluation Agent validates NWB files and generates reports (Epic 7)",
      "actions": {
        "extract_file_info": {
          "description": "Extract comprehensive NWB file information (Story 7.1)",
          "source": "conversation_agent",
          "context": {
            "required": ["nwb_file_path"]
          },
          "returns": {
            "file_info": {
              "nwb_version": "string",
              "creation_date": "datetime",
              "identifier": "string",
              "subject_id": "string",
              "metadata": {}
            }
          }
        },
        "validate_file": {
          "description": "Run NWB Inspector for quality evaluation (Story 7.2)",
          "source": "conversation_agent",
          "context": {
            "required": ["nwb_file_path"]
          },
          "returns": {
            "overall_status": "PASSED | PASSED_WITH_ISSUES | FAILED",
            "issues": [],
            "issue_counts": {
              "CRITICAL": 0,
              "ERROR": 0,
              "WARNING": 0,
              "BEST_PRACTICE": 0
            }
          },
          "note": "overall_status is NWB Inspector evaluation, not final session outcome"
        },
        "process_results": {
          "description": "Process validation results into structured format (Story 7.3)",
          "source": "self (after validate_file)",
          "context": {
            "required": ["validation_result", "file_info"]
          },
          "returns": {
            "validation_result": "Complete ValidationResult schema",
            "stored_in_global_state": true
          }
        },
        "generate_correction_context": {
          "description": "Generate actionable correction context (Story 8.1)",
          "source": "self (if validation status is FAILED or PASSED_WITH_ISSUES)",
          "context": {
            "required": ["validation_result"]
          },
          "returns": {
            "correction_context": "CorrectionContext schema",
            "sent_to": "conversation_agent"
          }
        },
        "generate_report_passed": {
          "description": "Generate PDF report with LLM analysis for PASSED/PASSED_WITH_ISSUES (Story 9.5)",
          "source": "self (if overall_status is PASSED or PASSED_WITH_ISSUES)",
          "context": {
            "required": ["validation_result", "file_info"]
          },
          "returns": {
            "pdf_report_path": "string",
            "llm_analysis": "Executive summary, quality assessment, recommendations"
          },
          "error_handling": "Raise LLMAPIException if LLM fails (critical context)"
        },
        "generate_report_failed": {
          "description": "Generate JSON report with correction guidance for FAILED (Story 9.6)",
          "source": "self (if overall_status is FAILED)",
          "context": {
            "required": ["validation_result", "correction_context"]
          },
          "returns": {
            "json_report_path": "string",
            "llm_guidance": "Per-issue fix strategies, roadmap"
          },
          "error_handling": "Raise LLMAPIException if LLM fails (critical context)"
        }
      }
    }
  },
  "message_flow_examples": {
    "happy_path_no_issues": {
      "description": "Successful conversion with PASSED validation (no issues)",
      "steps": [
        "1. API → conversation_agent.validate_metadata",
        "2. conversation_agent → conversion_agent.scan_files",
        "3. conversation_agent → conversion_agent.detect_format",
        "4. conversation_agent → conversion_agent.collect_metadata",
        "5. conversation_agent → conversion_agent.convert_file",
        "6. conversation_agent → evaluation_agent.extract_file_info",
        "7. conversation_agent → evaluation_agent.validate_file",
        "8. evaluation_agent → evaluation_agent.process_results",
        "9. evaluation_agent → evaluation_agent.generate_report_passed",
        "10. User downloads NWB + PDF report"
      ]
    },
    "passed_with_issues_user_accepts": {
      "description": "Validation passed with warnings, user accepts as-is (Story 8.3a)",
      "steps": [
        "1-9. Same as happy_path_no_issues",
        "10. evaluation_agent → conversation_agent.request_retry_approval (status=PASSED_WITH_ISSUES)",
        "11. conversation_agent → User: 'File is valid but has warnings. Improve?'",
        "12. User → API: /api/retry-approval (approved=false, accept_as_is=true)",
        "13. conversation_agent: Set validation_status='passed_accepted'",
        "14. User downloads NWB + PDF report with warnings"
      ]
    },
    "failed_with_retry": {
      "description": "Validation failed, user approves retry, correction succeeds (Story 8.7)",
      "steps": [
        "1-8. Same as happy_path_no_issues",
        "9. evaluation_agent → evaluation_agent.generate_correction_context",
        "10. evaluation_agent → conversation_agent.request_retry_approval (status=FAILED)",
        "11. conversation_agent → conversation_agent.analyze_correction_context (LLM)",
        "12. conversation_agent → User: 'Validation failed. Approve retry?'",
        "13. User → API: /api/retry-approval (approved=true)",
        "14. conversation_agent → User: Request missing data (if needed)",
        "15. User → API: /api/user-input (provides data)",
        "16. conversation_agent → conversion_agent.apply_corrections (attempt=2)",
        "17. conversation_agent → evaluation_agent.validate_file (revalidate)",
        "18. If PASSED: Generate report, set validation_status='passed' (after correction)",
        "19. User downloads NWB v2 + report"
      ]
    }
  },
  "error_handling_patterns": {
    "defensive_errors": {
      "description": "All agents raise exceptions immediately for errors (Constitution Principle III)",
      "examples": [
        "conversion_agent.convert_file: Raise exception with full NeuroConv error details",
        "evaluation_agent.validate_file: Raise exception if NWB Inspector times out",
        "conversation_agent.analyze_correction_context: Raise LLMAPIException if Claude API fails"
      ]
    },
    "optional_llm_degradation": {
      "description": "Only Story 5.3 (format detection ambiguity) degrades gracefully on LLM failure",
      "action": "conversion_agent.resolve_ambiguity",
      "fallback": "Use NeuroConv's highest-confidence result, log warning"
    }
  },
  "global_state_context_injection": {
    "description": "MCP server attaches global state to every message context (Story 1.3)",
    "injected_fields": [
      "status",
      "validation_status",
      "input_path",
      "output_path",
      "metadata",
      "stages",
      "logs",
      "timestamps",
      "correction_attempt",
      "checksums"
    ],
    "note": "All agents can access and update global state via MCP server"
  }
}
