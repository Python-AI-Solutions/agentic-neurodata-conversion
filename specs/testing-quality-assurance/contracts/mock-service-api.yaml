openapi: 3.0.3
info:
  title: Mock Service API
  description: |
    API for mock service management and configuration.
    Part of Testing and Quality Assurance Framework (testing-quality-assurance).

    **Constitutional Requirements**:
    - Deterministic mocking for reproducible tests (FR-009: 100+ mock scenarios)
    - Schema-First (Constitution III): Mock configurations validated against LinkML MockService entity
  version: 1.0.0

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api.example.com/v1
    description: Production server

paths:
  /mocks/llm:
    post:
      summary: Create LLM mock service
      description: |
        Creates a mock LLM service (OpenAI, Anthropic) with deterministic responses.
        Supports 100+ preset scenarios for reproducible testing (FR-009).
      operationId: createLLMMock
      tags:
        - Mock Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMMockRequest'
      responses:
        '201':
          description: LLM mock service created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockService'
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mocks/filesystem:
    post:
      summary: Create filesystem mock
      description: |
        Creates an in-memory fake filesystem for unit testing.
        Avoids disk I/O overhead and provides deterministic file operations (FR-009).
      operationId: createFilesystemMock
      tags:
        - Mock Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilesystemMockRequest'
      responses:
        '201':
          description: Filesystem mock created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockService'

  /mocks/network:
    post:
      summary: Create network simulation mock
      description: |
        Creates a network condition simulator for resilience testing.
        Simulates latency, packet loss, timeouts (FR-020: simulated network conditions).
      operationId: createNetworkMock
      tags:
        - Mock Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkMockRequest'
      responses:
        '201':
          description: Network mock created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockService'

  /mocks/{mock_id}/configuration:
    put:
      summary: Update mock configuration
      description: Updates configuration of an existing mock service
      operationId: updateMockConfiguration
      tags:
        - Mock Services
      parameters:
        - name: mock_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deterministic:
                  type: boolean
                  description: Enable/disable deterministic behavior
                response_patterns:
                  type: array
                  items:
                    $ref: '#/components/schemas/ResponsePattern'
                error_injection_rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/ErrorRule'
      responses:
        '200':
          description: Mock configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockService'
        '404':
          description: Mock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mocks/{mock_id}/scenarios/{scenario_name}:
    post:
      summary: Load preset scenario
      description: |
        Loads a preset scenario from 100+ available scenarios (FR-009).
        Examples: "llm_timeout", "network_latency_500ms", "filesystem_disk_full".
      operationId: loadPresetScenario
      tags:
        - Mock Services
      parameters:
        - name: mock_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scenario_name
          in: path
          required: true
          schema:
            type: string
          description: Name of preset scenario
      responses:
        '200':
          description: Preset scenario loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockService'
        '404':
          description: Mock or scenario not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mocks/{mock_id}:
    delete:
      summary: Stop and remove mock service
      description: Stops mock service and cleans up resources
      operationId: deleteMock
      tags:
        - Mock Services
      parameters:
        - name: mock_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Mock service deleted
        '404':
          description: Mock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    LLMMockRequest:
      type: object
      required:
        - service_type
        - deterministic
      properties:
        service_type:
          type: string
          enum: ['openai', 'anthropic', 'huggingface']
        deterministic:
          type: boolean
          default: true
          description: Must be true for reproducible tests (FR-009)
        response_patterns:
          type: array
          items:
            $ref: '#/components/schemas/ResponsePattern'
          description: Deterministic response sequence
        preset_scenario:
          type: string
          description: Load from 100+ preset scenarios
        error_injection:
          $ref: '#/components/schemas/ErrorRule'

    FilesystemMockRequest:
      type: object
      required:
        - initial_files
      properties:
        initial_files:
          type: object
          additionalProperties:
            type: string
          description: Map of file paths to contents
        permissions:
          type: object
          additionalProperties:
            type: string
          description: File permissions (e.g., "rwxr-xr-x")
        disk_size_mb:
          type: integer
          minimum: 1
          description: Simulated disk size for testing disk_full errors

    NetworkMockRequest:
      type: object
      required:
        - latency_ms
      properties:
        latency_ms:
          type: integer
          minimum: 0
          description: Simulated network latency
        packet_loss_rate:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Packet loss rate (0.0 - 1.0)
        bandwidth_limit_kbps:
          type: integer
          minimum: 1
          description: Simulated bandwidth limit
        timeout_probability:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Probability of connection timeout

    MockService:
      type: object
      required:
        - id
        - service_type
        - status
        - deterministic
      properties:
        id:
          type: string
          format: uuid
        service_type:
          type: string
          enum: ['llm', 'filesystem', 'network', 'time', 'api', 'database']
        status:
          type: string
          enum: ['initialized', 'configured', 'active', 'stopped']
        deterministic:
          type: boolean
          description: Whether mock produces deterministic outputs
        configuration:
          type: object
          description: Service-specific configuration
        preset_scenario:
          type: string
          description: Currently loaded preset scenario (if any)
        created_at:
          type: string
          format: date-time

    ResponsePattern:
      type: object
      required:
        - trigger
        - response
      properties:
        trigger:
          type: object
          description: Conditions that trigger this response (e.g., specific prompt)
        response:
          type: object
          description: Mock response to return
        delay_ms:
          type: integer
          minimum: 0
          description: Simulated response delay
        repeat_count:
          type: integer
          minimum: 1
          default: 1
          description: Number of times to repeat this response

    ErrorRule:
      type: object
      required:
        - error_type
        - probability
      properties:
        error_type:
          type: string
          enum: ['timeout', 'connection_refused', 'http_500', 'http_503', 'rate_limit', 'auth_failure']
        probability:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Probability of injecting this error (0.0 - 1.0)
        delay_ms:
          type: integer
          minimum: 0
          description: Delay before error occurs
        error_message:
          type: string
          description: Custom error message

    Error:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
