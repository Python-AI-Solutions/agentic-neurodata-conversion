[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agentic-neurodata-conversion"
version = "0.1.0"
description = "Multi-agent system for converting neuroscience data to NWB format using MCP server architecture"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Agentic Neurodata Conversion Team", email = "contact@example.com"}
]
maintainers = [
    {name = "Agentic Neurodata Conversion Team", email = "contact@example.com"}
]
keywords = [
    "neuroscience",
    "nwb",
    "neuroconv",
    "mcp-server",
    "multi-agent",
    "data-conversion"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # MCP Server dependencies
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",

    # Async and HTTP
    "httpx>=0.24.0",
    "aiofiles>=23.0.0",

    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",

    # Neuroscience specific
    "neuroconv>=0.4.0",
    "pynwb>=2.5.0",
    "nwbinspector>=0.4.0",

    # Note: LinkML and RDF deferred to post-MVP per constitution

    # Utilities
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "python-dotenv>=1.0.0"
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.1.0",
    "pytest-json-report>=1.5.0",
    "pytest-randomly>=3.12.0",
    "pytest-clarity>=1.0.1",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "responses>=0.23.0",
    "httpx>=0.24.0",
    "aioresponses>=0.7.4",

    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",

    # Development utilities
    "ipython>=8.0.0",
    "jupyter>=1.0.0"
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.1.0",
    "pytest-json-report>=1.5.0",
    "pytest-randomly>=3.12.0",
    "pytest-clarity>=1.0.1",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "responses>=0.23.0",
    "httpx>=0.24.0",
    "aioresponses>=0.7.4"
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0"
]

[project.urls]
Homepage = "https://github.com/example/agentic-neurodata-conversion"
Documentation = "https://agentic-neurodata-conversion.readthedocs.io"
Repository = "https://github.com/example/agentic-neurodata-conversion"
Issues = "https://github.com/example/agentic-neurodata-conversion/issues"

[project.scripts]
agentic-converter = "agentic_neurodata_conversion.cli:main"
mcp-server = "agentic_neurodata_conversion.mcp_server:main"

[tool.hatch.build.targets.wheel]
packages = ["agentic_neurodata_conversion"]

[tool.hatch.build.targets.sdist]
include = [
    "/agentic_neurodata_conversion",
    "/tests",
    "/examples",
    "/docs",
    "/scripts"
]

# Note: Pixi configuration is managed in pixi.toml

# Tool configurations
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=agentic_neurodata_conversion",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=80",
    "--tb=line",
    "--no-header",
    "--disable-warnings"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Direct functionality tests with no external dependencies",
    "mock_llm: Tests with mocked LLM responses",
    "small_model: Tests with <3B parameter local models",
    "large_model_minimal: Tests with 7B models, minimal context",
    "large_model_extended: Tests with 7B models, full context",
    "cheap_api: Tests with inexpensive cloud APIs",
    "frontier_api: Tests with expensive frontier models",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance and load tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "mcp_server: marks tests for MCP server functionality",
    "agents: marks tests for agent functionality",
    "client: marks tests for client library functionality",
    "data_management: marks tests for data management functionality",
    "requires_llm: marks tests that require LLM services",
    "requires_datasets: marks tests that require test datasets"
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore::FutureWarning",
    "ignore::RuntimeWarning"
]
log_cli = false
log_cli_level = "WARNING"
log_cli_format = "%(levelname)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.lint.isort]
known-first-party = ["agentic_neurodata_conversion"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "neuroconv.*",
    "pynwb.*",
    "nwbinspector.*",
    "linkml.*",
    "rdflib.*"
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["agentic_neurodata_conversion"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
