lab_to_nwb_pattern:
  purpose: >
    A lab-to-NWB repo is an end-to-end, reproducible conversion pipeline that
    turns a labâ€™s native data (often multiple modalities) into a single NWB file
    per session or subject. It wraps NeuroConv interfaces, adds lab-specific
    metadata & preprocessing, provides a CLI, and validates outputs.
  typical_contents:
    - config/: metadata templates (YAML), interface config, channel maps
    - src/<lab_slug>/:
        - converter.py: custom NWBConverter (selects NeuroConv interfaces)
        - preprocess.py:
            time alignment, renaming, trialization, unit/channel maps
        - metadata.py: rules to synthesize missing metadata from files/DB
        - io_layout.py: how to find files for a session
    - convert_session.py: main CLI to convert one or many sessions
    - tests/: round-trip, schema, and validator checks
    - pyproject.toml:
        pinned deps (neuroconv, pynwb, spikeinterface, nwbinspector)
    - README.md: quick start, file layout examples, troubleshooting
  core_steps:
    - discover_modalities_and_files
    - choose_neuroconv_interfaces
    - synthesize_metadata (prompt user or infer from filenames/manifests)
    - optional_preprocessing (clock alignment, channel remap, trial tables)
    - run_conversion (write NWB) + validate (nwbinspector) + checksum
  metadata_best_practices:
    - Always fill Subject, Device(s), Electrode groups, acquisition system
      details
    - Timebase alignment across modalities (TTL, sync files, timestamps)
    - Trials/epochs table with clear behavioral/condition annotations
    - Provenance: tool version, commit hash, command line args, environment
  agent_objective:
    - If lab is unknown, infer likely formats from directory structure & file
      signatures
    - Propose interfaces; ask minimal clarifying questions only when needed
    - Emit a full repo scaffold + runnable conversion script
