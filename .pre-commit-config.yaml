# Pre-commit hooks for code quality and consistency
# Install with: pixi run pre-commit install
# Run manually: pixi run pre-commit run --all-files

repos:
  # General file fixes
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
        args: [--allow-multiple-documents]
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-added-large-files
        name: Check for large files
        args: [--maxkb=1000]
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-symlinks
        name: Check for broken symlinks
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
      - id: check-shebang-scripts-are-executable
        name: Check scripts with shebangs are executable
      - id: detect-private-key
        name: Detect private keys
      - id: detect-aws-credentials
        name: Detect AWS credentials
        args: [--allow-missing-credentials]
      - id: mixed-line-ending
        name: Fix mixed line endings
        args: [--fix=lf]
      - id: fix-byte-order-marker
        name: Fix byte order marker
      - id: check-docstring-first
        name: Check docstring is first
      - id: debug-statements
        name: Check for debug statements
      - id: name-tests-test
        name: Verify test files are named correctly
        args: [--pytest-test-first]

  # Python specific
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.14
    hooks:
      - id: ruff
        name: Ruff linter
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format
        name: Ruff formatter

  # Black formatter (alternative/additional to ruff-format)
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: Black formatter
        language_version: python3
        args: [--line-length=100]

  # isort for import sorting
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort imports
        args: [--profile=black, --line-length=100]

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Type check with mypy
        args: [--ignore-missing-imports, --no-strict-optional]
        additional_dependencies:
          - types-requests
          - types-pyyaml
          - types-jsonschema
        exclude: ^tests/

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: Security check with bandit
        args: [-r, --skip=B101]
        exclude: ^tests/

  # Docstring coverage
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check docstring style
        exclude: ^(tests/|setup.py)
        args: [--convention=numpy]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format YAML/JSON/Markdown
        types_or: [yaml, json, markdown]
        args: [--prose-wrap=always]

  # Shell script checks
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Check shell scripts

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        name: Lint markdown files
        args: [--fix]

  # Jupyter notebook cleaning
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout
        name: Strip Jupyter notebook outputs

  # Check for secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args: [--baseline, .secrets.baseline]

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        name: Add license headers
        files: \.py$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - "#"
        exclude: ^(tests/|__pycache__/)

  # Python upgrade syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        name: Upgrade Python syntax
        args: [--py39-plus]

  # Check for common typos
  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.6
    hooks:
      - id: codespell
        name: Check spelling
        args: [--write-changes]
        additional_dependencies:
          - tomli

  # Validate GitHub Actions
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.27.3
    hooks:
      - id: check-github-actions
        name: Validate GitHub Actions
      - id: check-github-workflows
        name: Validate GitHub Workflows

  # Check requirements files
  - repo: https://github.com/regebro/pyroma
    rev: "4.2"
    hooks:
      - id: pyroma
        name: Check package metadata
        files: setup.py|pyproject.toml

# Configuration for specific hooks
default_language_version:
  python: python3.11

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [mypy, shellcheck]  # These might need additional setup in CI